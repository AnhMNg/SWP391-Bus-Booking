/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import model.Company;
import utils.DBUtils;

/**
 *
 * @author baolo
 */
public class CompanyManager {

    public static Company getCompanyAccount(String phone, String password) {
        Connection cn = null;
        Company com = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                String sql = "select * from Company where phone = ? and Password = ?";
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setString(1, phone);
                pst.setString(2, password);
                ResultSet rs = pst.executeQuery();
                if (rs != null && rs.next()) {
                    com = new Company(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
                            rs.getString(5), rs.getString(6), rs.getString(7));
                }
                if (pst != null) {
                    pst.close();
                }
                if (rs != null) {
                    rs.close();
                }
            }

        } catch (Exception e) {

        } finally {
            if (cn != null) {
                try {
                    cn.close();
                } catch (Exception e) {
                }
            }
        }
        return com;
    }

    public static Company getCompanyInfo(int id) {
        Connection cn = null;
        Company com = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                String sql = "select * from Company where CompanyId = ?";
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setInt(1, id);
                ResultSet rs = pst.executeQuery();
                if (rs != null && rs.next()) {
                    com = new Company(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
                            rs.getString(5), rs.getString(6), "***");
                }
                if (pst != null) {
                    pst.close();
                }
                if (rs != null) {
                    rs.close();
                }
            }

        } catch (Exception e) {

        } finally {
            if (cn != null) {
                try {
                    cn.close();
                } catch (Exception e) {
                }
            }
        }
        return com;
    }

    // get top n Company have a most number of Route
    public static ArrayList<Company> getTopCompany(int top) {
        ArrayList<Company> list = new ArrayList<>();
        Connection cn = null;
        Company com = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                String sql = "SELECT TOP(?) * FROM Company,\n"
                        + "(SELECT  Company.name,COUNT(routeId) AS numberofRoute FROM Company,Route \n"
                        + "WHERE Company.companyId = Route.companyId \n"
                        + "GROUP BY name) AS long\n"
                        + "WHERE long.name = Company.name\n"
                        + "ORDER BY numberofRoute DESC";
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setLong(1, top);
                ResultSet rs = pst.executeQuery();
                while (rs != null && rs.next()) {
                    com = new Company(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
                            rs.getString(5), rs.getString(6), "*****");
                    list.add(com);
                }
                if (pst != null) {
                    pst.close();
                }
                if (rs != null) {
                    rs.close();
                }
            }

        } catch (Exception e) {
                System.out.println(e.toString());
        } finally {
            if (cn != null) {
                try {
                    cn.close();
                } catch (Exception e) {
                }
            }
        }

        return list;
    }
}
==============================================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import model.User;
import utils.DBUtils;

/**
 *
 * @author baolo
 */
public class UserManager {

    private static final String LOGIN = "SELECT * FROM [User] WHERE phone = ? AND password = ?";
    private static final String REGISTER = "INSERT INTO [User] VALUES(?,?,?,?,?)";
    private static final String CHECK_DUPLICATE = "SELECT * FROM [User] WHERE phone = ?";

    public static User getUserById(long id) throws SQLException {
        Connection cn = null;
        User us = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                String sql = "select * from [User] where userId = ?";
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setLong(1, id);
                ResultSet rs = pst.executeQuery();
                if (rs != null && rs.next()) {
                    us = new User(id, rs.getString(2), rs.getString(3), rs.getString(4),
                            rs.getInt(5), rs.getString(6));
                }
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
            }
        } catch (Exception e) {

        } finally {
            if (cn != null) {
                cn.close();
            }
        }
        return us;
    }

    public User checkLogin(String phone, String password) throws SQLException {
        User user = null;
        Connection cn = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                pst = cn.prepareStatement(LOGIN);
                pst.setString(1, phone);
                pst.setString(2, password);
                rs = pst.executeQuery();
                if (rs.next()) {
                    user = new User(rs.getLong(1), rs.getString(2), phone, rs.getString(4), rs.getInt(5), "***");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (pst != null) {
                pst.close();
            }
            if (cn != null) {
                cn.close();
            }
        }
        return user;
    }

    public boolean register(User user) throws SQLException {
        Connection con = DBUtils.getConnection();
        if (con != null) {
            PreparedStatement ps = con.prepareStatement(REGISTER);
            ps.setString(1, user.getName());
            ps.setString(2, user.getPhone());
            ps.setString(3, user.getAvtLink());
            ps.setInt(4, 2);
            ps.setString(5, user.getPassword());
            if (ps.executeUpdate() > 0) {
                return true;
            }
        }
        return false;
    }

    public boolean checkDuplicate(String phone) throws SQLException {
        Connection con = DBUtils.getConnection();
        if (con != null) {
            PreparedStatement ps = con.prepareStatement(CHECK_DUPLICATE);
            ps.setString(1, phone);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                return true;
            }
        }
        return false;
    }
}
=================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import model.Company;
import model.TicketDetail;
import utils.DBUtils;

/**
 *
 * @author baolo
 */
public class TicketManager {

    public static ArrayList<TicketDetail> getUpcomingTickeDetailtByCustomerId(long id) {
        ArrayList<TicketDetail> list = new ArrayList<>();
        Connection cn = null;
        TicketDetail tik = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                String sql = "select tk.routeDeTailId, tk.position,od.date,rd.price,rd.startTime,rd.timeArrival, com.name, bt.capacity, bt.kind,PlaceName.depart,PlaceName.destination,tk.ticketId,tk.orderId\n"
                        + "from [Ticket] tk,[Order] od,[RouteDetail] rd,[Route] r,[BusType] bt,[Company] com,(select dep.companyId, dep.routeId,dep.name depart,des.name destination from\n"
                        + "(select * from Route,Place where Route.departId = Place.placeId) dep,\n"
                        + "(select * from Route,Place where Route.destinationId = Place.placeId) des\n"
                        + "where des.routeId = dep.routeId) PlaceName\n"
                        + "where tk.orderId = od.orderId and tk.routeDeTailId = rd.routeDetailId and rd.routeId = r.routeId \n"
                        + "		and rd.busTypeId = bt.busTypeId and od.customerId = ? and com.companyId = r.companyId and PlaceName.routeId = r.routeId\n"
                        + "		and rd.startTime > CURRENT_TIMESTAMP";
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setLong(1, id);
                ResultSet rs = pst.executeQuery();
                while (rs != null && rs.next()) {
                    tik = new TicketDetail(rs.getLong(1), rs.getInt(2), rs.getString(3), rs.getInt(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getInt(8), rs.getString(9),
                            rs.getString(10), rs.getString(11), rs.getLong(12), rs.getLong(13));
                    list.add(tik);
                }
                if (pst != null) {
                    pst.close();
                }
                if (rs != null) {
                    rs.close();
                }
            }

        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cn != null) {
                try {
                    cn.close();
                } catch (Exception e) {
                }
            }
        }

        return list;
    }
    public static ArrayList<TicketDetail> getCompletedTickeDetailtByCustomerId(long id) {
        ArrayList<TicketDetail> list = new ArrayList<>();
        Connection cn = null;
        TicketDetail tik = null;
        try {
            cn = DBUtils.getConnection();
            if (cn != null) {
                String sql = "select tk.routeDeTailId, tk.position,od.date,rd.price,rd.startTime,rd.timeArrival, com.name, bt.capacity, bt.kind,PlaceName.depart,PlaceName.destination,tk.ticketId,tk.orderId\n"
                        + "from [Ticket] tk,[Order] od,[RouteDetail] rd,[Route] r,[BusType] bt,[Company] com,(select dep.companyId, dep.routeId,dep.name depart,des.name destination from\n"
                        + "(select * from Route,Place where Route.departId = Place.placeId) dep,\n"
                        + "(select * from Route,Place where Route.destinationId = Place.placeId) des\n"
                        + "where des.routeId = dep.routeId) PlaceName\n"
                        + "where tk.orderId = od.orderId and tk.routeDeTailId = rd.routeDetailId and rd.routeId = r.routeId \n"
                        + "		and rd.busTypeId = bt.busTypeId and od.customerId = ? and com.companyId = r.companyId and PlaceName.routeId = r.routeId\n"
                        + "		and rd.startTime < CURRENT_TIMESTAMP";
                PreparedStatement pst = cn.prepareStatement(sql);
                pst.setLong(1, id);
                ResultSet rs = pst.executeQuery();
                while (rs != null && rs.next()) {
                    tik = new TicketDetail(rs.getLong(1), rs.getInt(2), rs.getString(3), rs.getInt(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getInt(8), rs.getString(9),
                            rs.getString(10), rs.getString(11), rs.getLong(12), rs.getLong(13));
                    list.add(tik);
                }
                if (pst != null) {
                    pst.close();
                }
                if (rs != null) {
                    rs.close();
                }
            }

        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (cn != null) {
                try {
                    cn.close();
                } catch (Exception e) {
                }
            }
        }

        return list;
    }
}
==============
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

/**
 *
 * @author baolo
 */
public class TicketDetail extends Ticket{
    private String purchaseDate;
    private int price;
    private String timeStart;
    private String timeArrival;
    private String companyName;
    private int capacity;
    private String kind;
    private String depart;
    private String destination;

    public TicketDetail() {
    }

    public TicketDetail(long routeDetailId, int position, String purchaseDate, int price, String timeStart, String timeArrival, String companyName, int capacity, String kind, String depart, String destination,long ticketId, long orderId) {
        super(ticketId, orderId, routeDetailId, position);
        this.purchaseDate = purchaseDate;
        this.price = price;
        this.timeStart = timeStart;
        this.timeArrival = timeArrival;
        this.companyName = companyName;
        this.capacity = capacity;
        this.kind = kind;
        this.depart = depart;
        this.destination = destination;
    }

    public String getPurchaseDate() {
        return purchaseDate;
    }

    public void setPurchaseDate(String purchaseDate) {
        this.purchaseDate = purchaseDate;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public String getTimeStart() {
        return timeStart;
    }

    public void setTimeStart(String timeStart) {
        this.timeStart = timeStart;
    }

    public String getTimeArrival() {
        return timeArrival;
    }

    public void setTimeArrival(String timeArrival) {
        this.timeArrival = timeArrival;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public int getCapacity() {
        return capacity;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    public String getKind() {
        return kind;
    }

    public void setKind(String kind) {
        this.kind = kind;
    }

    public String getDepart() {
        return depart;
    }

    public void setDepart(String depart) {
        this.depart = depart;
    }

    public String getDestination() {
        return destination;
    }

    public void setDestination(String destination) {
        this.destination = destination;
    }
    
}
